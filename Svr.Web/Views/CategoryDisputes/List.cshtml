@using Svr.Utils.V
@model Svr.Utils.Models.CategoryDisputesViewModels.IndexViewModel

@*@await Html.PartialAsync("_StatusMessage", Model.StatusMessage)*@

@{await Html.RenderPartialAsync("_filtration", Model.FilterViewModel); }

@if (Model.ItemViewModels.Any())
{
    await Html.RenderPartialAsync("_sort", Model);
    await Html.RenderPartialAsync("_pagination", Model);

    @*<page-link page-model="Model.PaginationInfo" page-action="Index"
        page-url-name="@(Model.FilterViewModel.SelectedName)"
        page-url-sortorder="@(Model.SortViewModel.Current)"></page-link>*@


    foreach (var item in Model.ItemViewModels)
    {
        <div>
            <hr />
            <h4>@item.ToString()</h4>

            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(modelItem => item.Name)
                </dt>
                <dd>
                    @Html.DisplayFor(modelItem => item.Name)
                </dd>
                <dt>
                    @Html.DisplayNameFor(modelItem => item.Description)
                </dt>
                <dd>
                    @Html.DisplayTextFor(modelItem => item.Description)
                </dd>

                <dt>
                    @Html.DisplayNameFor(modelItem => item.CreatedOnUtc)
                </dt>
                <dd>
                    @Html.DisplayFor(modelItem => item.CreatedOnUtc)
                </dd>
                <dt>
                    @Html.DisplayNameFor(modelItem => item.UpdatedOnUtc)
                </dt>
                <dd>
                    @Html.DisplayFor(modelItem => item.UpdatedOnUtc)
                </dd>
                <dd>
                    @{await Html.RenderPartialAsync(partialViewName: $"_EditDetailsDeleteButton", model: @item.Id.ToString());
                    }
                </dd>
            </dl>
        </div>
    }
    await Html.RenderPartialAsync("_pagination", Model); 
}
else
{
    < div >
    НЕТ РЕЗУЛЬТАТОВ, СООТВЕТСТВУЮЩИХ ВАШЕМУ ПОИСКУ
    </ div >
}